
sketch_empty.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001055  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d4  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000991  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084c  00000000  00000000  00002e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000036ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 30       	cpi	r26, 0x09	; 9
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  d8:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <setup>:



void setup() {
	// initialize digital pin 13 as an output.
	pinMode(13, OUTPUT);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <pinMode>

000000e8 <loop>:
}

// the loop function runs over and over again forever
void loop() {
sos();
  e8:	0c 94 a4 00 	jmp	0x148	; 0x148 <_Z3sosv>

000000ec <_Z9blinkFastv>:
 brake();
}

void blinkFast()
{
 	digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 13 02 	call	0x426	; 0x426 <digitalWrite>
 	delay(250);              // wait for a second
  f4:	6a ef       	ldi	r22, 0xFA	; 250
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 37 01 	call	0x26e	; 0x26e <delay>
 	digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	0e 94 13 02 	call	0x426	; 0x426 <digitalWrite>
 	delay(250);              // wait for a second
 108:	6a ef       	ldi	r22, 0xFA	; 250
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0c 94 37 01 	jmp	0x26e	; 0x26e <delay>

00000114 <_Z8blinkLowv>:
}

void blinkLow()
{
 	digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	0e 94 13 02 	call	0x426	; 0x426 <digitalWrite>
 	delay(1000);              // wait for a second
 11c:	68 ee       	ldi	r22, 0xE8	; 232
 11e:	73 e0       	ldi	r23, 0x03	; 3
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 37 01 	call	0x26e	; 0x26e <delay>
 	digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	0e 94 13 02 	call	0x426	; 0x426 <digitalWrite>
 	delay(1000);              // wait for a second
 130:	68 ee       	ldi	r22, 0xE8	; 232
 132:	73 e0       	ldi	r23, 0x03	; 3
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0c 94 37 01 	jmp	0x26e	; 0x26e <delay>

0000013c <_Z5brakev>:
}

void brake()
{delay(2000);                 //Wait for the next sos round
 13c:	60 ed       	ldi	r22, 0xD0	; 208
 13e:	77 e0       	ldi	r23, 0x07	; 7
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0c 94 37 01 	jmp	0x26e	; 0x26e <delay>

00000148 <_Z3sosv>:
 */ 
 #include<Arduino.h>
 #include "SOS.h"
 void sos()
 {
 blinkFast();
 148:	0e 94 76 00 	call	0xec	; 0xec <_Z9blinkFastv>
 blinkFast();
 14c:	0e 94 76 00 	call	0xec	; 0xec <_Z9blinkFastv>
 blinkFast();
 150:	0e 94 76 00 	call	0xec	; 0xec <_Z9blinkFastv>
 blinkLow();
 154:	0e 94 8a 00 	call	0x114	; 0x114 <_Z8blinkLowv>
 blinkLow();
 158:	0e 94 8a 00 	call	0x114	; 0x114 <_Z8blinkLowv>
 blinkLow();
 15c:	0e 94 8a 00 	call	0x114	; 0x114 <_Z8blinkLowv>
 blinkFast();
 160:	0e 94 76 00 	call	0xec	; 0xec <_Z9blinkFastv>
 blinkFast();
 164:	0e 94 76 00 	call	0xec	; 0xec <_Z9blinkFastv>
 blinkFast();
 168:	0e 94 76 00 	call	0xec	; 0xec <_Z9blinkFastv>
 brake();
 16c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_Z5brakev>

00000170 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 170:	08 95       	ret

00000172 <main>:

int main(void)
{
	init();
 172:	0e 94 73 01 	call	0x2e6	; 0x2e6 <init>

	initVariant();
 176:	0e 94 b8 00 	call	0x170	; 0x170 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 17a:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 182:	0e 94 74 00 	call	0xe8	; 0xe8 <loop>
		if (serialEventRun) serialEventRun();
 186:	20 97       	sbiw	r28, 0x00	; 0
 188:	e1 f3       	breq	.-8      	; 0x182 <main+0x10>
 18a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 18e:	f9 cf       	rjmp	.-14     	; 0x182 <main+0x10>

00000190 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 1aa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 1ae:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 1b2:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 1b6:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
 1ba:	23 e0       	ldi	r18, 0x03	; 3
 1bc:	23 0f       	add	r18, r19
 1be:	2d 37       	cpi	r18, 0x7D	; 125
 1c0:	20 f4       	brcc	.+8      	; 0x1ca <__vector_16+0x3a>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <__vector_16+0x44>
 1ca:	26 e8       	ldi	r18, 0x86	; 134
 1cc:	23 0f       	add	r18, r19
 1ce:	02 96       	adiw	r24, 0x02	; 2
 1d0:	a1 1d       	adc	r26, r1
 1d2:	b1 1d       	adc	r27, r1
 1d4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 1d8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 1dc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 1e0:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 1e4:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 1e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 1ec:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 1f0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 1f4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	a1 1d       	adc	r26, r1
 1fc:	b1 1d       	adc	r27, r1
 1fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 202:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 206:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 20a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <micros>:
 224:	3f b7       	in	r19, 0x3f	; 63
 226:	f8 94       	cli
 228:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 22c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 230:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 234:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 238:	26 b5       	in	r18, 0x26	; 38
 23a:	a8 9b       	sbis	0x15, 0	; 21
 23c:	05 c0       	rjmp	.+10     	; 0x248 <micros+0x24>
 23e:	2f 3f       	cpi	r18, 0xFF	; 255
 240:	19 f0       	breq	.+6      	; 0x248 <micros+0x24>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	a1 1d       	adc	r26, r1
 246:	b1 1d       	adc	r27, r1
 248:	3f bf       	out	0x3f, r19	; 63
 24a:	ba 2f       	mov	r27, r26
 24c:	a9 2f       	mov	r26, r25
 24e:	98 2f       	mov	r25, r24
 250:	88 27       	eor	r24, r24
 252:	82 0f       	add	r24, r18
 254:	91 1d       	adc	r25, r1
 256:	a1 1d       	adc	r26, r1
 258:	b1 1d       	adc	r27, r1
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	42 e0       	ldi	r20, 0x02	; 2
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	4a 95       	dec	r20
 26a:	d1 f7       	brne	.-12     	; 0x260 <micros+0x3c>
 26c:	08 95       	ret

0000026e <delay>:
 26e:	8f 92       	push	r8
 270:	9f 92       	push	r9
 272:	af 92       	push	r10
 274:	bf 92       	push	r11
 276:	cf 92       	push	r12
 278:	df 92       	push	r13
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	6b 01       	movw	r12, r22
 280:	7c 01       	movw	r14, r24
 282:	0e 94 12 01 	call	0x224	; 0x224 <micros>
 286:	4b 01       	movw	r8, r22
 288:	5c 01       	movw	r10, r24
 28a:	c1 14       	cp	r12, r1
 28c:	d1 04       	cpc	r13, r1
 28e:	e1 04       	cpc	r14, r1
 290:	f1 04       	cpc	r15, r1
 292:	01 f1       	breq	.+64     	; 0x2d4 <delay+0x66>
 294:	0e 94 43 02 	call	0x486	; 0x486 <yield>
 298:	0e 94 12 01 	call	0x224	; 0x224 <micros>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	88 19       	sub	r24, r8
 2a2:	99 09       	sbc	r25, r9
 2a4:	aa 09       	sbc	r26, r10
 2a6:	bb 09       	sbc	r27, r11
 2a8:	88 3e       	cpi	r24, 0xE8	; 232
 2aa:	93 40       	sbci	r25, 0x03	; 3
 2ac:	a1 05       	cpc	r26, r1
 2ae:	b1 05       	cpc	r27, r1
 2b0:	60 f3       	brcs	.-40     	; 0x28a <delay+0x1c>
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	c2 1a       	sub	r12, r18
 2b6:	d1 08       	sbc	r13, r1
 2b8:	e1 08       	sbc	r14, r1
 2ba:	f1 08       	sbc	r15, r1
 2bc:	88 ee       	ldi	r24, 0xE8	; 232
 2be:	88 0e       	add	r8, r24
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	98 1e       	adc	r9, r24
 2c4:	a1 1c       	adc	r10, r1
 2c6:	b1 1c       	adc	r11, r1
 2c8:	c1 14       	cp	r12, r1
 2ca:	d1 04       	cpc	r13, r1
 2cc:	e1 04       	cpc	r14, r1
 2ce:	f1 04       	cpc	r15, r1
 2d0:	19 f7       	brne	.-58     	; 0x298 <delay+0x2a>
 2d2:	db cf       	rjmp	.-74     	; 0x28a <delay+0x1c>
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	08 95       	ret

000002e6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2e6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2e8:	84 b5       	in	r24, 0x24	; 36
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 2ee:	84 b5       	in	r24, 0x24	; 36
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 2f4:	85 b5       	in	r24, 0x25	; 37
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 2fa:	85 b5       	in	r24, 0x25	; 37
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 300:	ee e6       	ldi	r30, 0x6E	; 110
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	81 60       	ori	r24, 0x01	; 1
 308:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 30a:	e1 e8       	ldi	r30, 0x81	; 129
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 31c:	e0 e8       	ldi	r30, 0x80	; 128
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	81 60       	ori	r24, 0x01	; 1
 324:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 326:	e1 eb       	ldi	r30, 0xB1	; 177
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 330:	e0 eb       	ldi	r30, 0xB0	; 176
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	81 60       	ori	r24, 0x01	; 1
 338:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 33a:	ea e7       	ldi	r30, 0x7A	; 122
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	84 60       	ori	r24, 0x04	; 4
 342:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 344:	80 81       	ld	r24, Z
 346:	82 60       	ori	r24, 0x02	; 2
 348:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 34a:	80 81       	ld	r24, Z
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 350:	80 81       	ld	r24, Z
 352:	80 68       	ori	r24, 0x80	; 128
 354:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 356:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 35a:	08 95       	ret

0000035c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	81 f0       	breq	.+32     	; 0x380 <turnOffPWM+0x24>
 360:	28 f4       	brcc	.+10     	; 0x36c <turnOffPWM+0x10>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	99 f0       	breq	.+38     	; 0x38c <turnOffPWM+0x30>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	a1 f0       	breq	.+40     	; 0x392 <turnOffPWM+0x36>
 36a:	08 95       	ret
 36c:	87 30       	cpi	r24, 0x07	; 7
 36e:	a9 f0       	breq	.+42     	; 0x39a <turnOffPWM+0x3e>
 370:	88 30       	cpi	r24, 0x08	; 8
 372:	b9 f0       	breq	.+46     	; 0x3a2 <turnOffPWM+0x46>
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	d1 f4       	brne	.+52     	; 0x3ac <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 378:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	03 c0       	rjmp	.+6      	; 0x386 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 380:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 384:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 386:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 38a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 38c:	84 b5       	in	r24, 0x24	; 36
 38e:	8f 77       	andi	r24, 0x7F	; 127
 390:	02 c0       	rjmp	.+4      	; 0x396 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 392:	84 b5       	in	r24, 0x24	; 36
 394:	8f 7d       	andi	r24, 0xDF	; 223
 396:	84 bd       	out	0x24, r24	; 36
 398:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 39a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 3a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3a6:	8f 7d       	andi	r24, 0xDF	; 223
 3a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3ac:	08 95       	ret

000003ae <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	fc 01       	movw	r30, r24
 3b6:	e4 58       	subi	r30, 0x84	; 132
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 3bc:	fc 01       	movw	r30, r24
 3be:	e0 57       	subi	r30, 0x70	; 112
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3c4:	88 23       	and	r24, r24
 3c6:	61 f1       	breq	.+88     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	fc 01       	movw	r30, r24
 3d0:	e2 55       	subi	r30, 0x52	; 82
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	c5 91       	lpm	r28, Z+
 3d6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 3d8:	fc 01       	movw	r30, r24
 3da:	ec 55       	subi	r30, 0x5C	; 92
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	a5 91       	lpm	r26, Z+
 3e0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 3e2:	61 11       	cpse	r22, r1
 3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 3e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 3e8:	f8 94       	cli
		*reg &= ~bit;
 3ea:	88 81       	ld	r24, Y
 3ec:	20 95       	com	r18
 3ee:	82 23       	and	r24, r18
 3f0:	88 83       	st	Y, r24
		*out &= ~bit;
 3f2:	ec 91       	ld	r30, X
 3f4:	2e 23       	and	r18, r30
 3f6:	0b c0       	rjmp	.+22     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 3f8:	62 30       	cpi	r22, 0x02	; 2
 3fa:	61 f4       	brne	.+24     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
		uint8_t oldSREG = SREG;
 3fc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 3fe:	f8 94       	cli
		*reg &= ~bit;
 400:	38 81       	ld	r19, Y
 402:	82 2f       	mov	r24, r18
 404:	80 95       	com	r24
 406:	83 23       	and	r24, r19
 408:	88 83       	st	Y, r24
		*out |= bit;
 40a:	ec 91       	ld	r30, X
 40c:	2e 2b       	or	r18, r30
 40e:	2c 93       	st	X, r18
		SREG = oldSREG;
 410:	9f bf       	out	0x3f, r25	; 63
 412:	06 c0       	rjmp	.+12     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
	} else {
		uint8_t oldSREG = SREG;
 414:	8f b7       	in	r24, 0x3f	; 63
                cli();
 416:	f8 94       	cli
		*reg |= bit;
 418:	e8 81       	ld	r30, Y
 41a:	2e 2b       	or	r18, r30
 41c:	28 83       	st	Y, r18
		SREG = oldSREG;
 41e:	8f bf       	out	0x3f, r24	; 63
	}
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	e8 59       	subi	r30, 0x98	; 152
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 438:	f9 01       	movw	r30, r18
 43a:	e4 58       	subi	r30, 0x84	; 132
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 440:	f9 01       	movw	r30, r18
 442:	e0 57       	subi	r30, 0x70	; 112
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 448:	cc 23       	and	r28, r28
 44a:	c9 f0       	breq	.+50     	; 0x47e <digitalWrite+0x58>
 44c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 44e:	81 11       	cpse	r24, r1
 450:	0e 94 ae 01 	call	0x35c	; 0x35c <turnOffPWM>

	out = portOutputRegister(port);
 454:	ec 2f       	mov	r30, r28
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	ec 55       	subi	r30, 0x5C	; 92
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	a5 91       	lpm	r26, Z+
 462:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 464:	8f b7       	in	r24, 0x3f	; 63
	cli();
 466:	f8 94       	cli

	if (val == LOW) {
 468:	11 11       	cpse	r17, r1
 46a:	05 c0       	rjmp	.+10     	; 0x476 <digitalWrite+0x50>
		*out &= ~bit;
 46c:	9c 91       	ld	r25, X
 46e:	ed 2f       	mov	r30, r29
 470:	e0 95       	com	r30
 472:	e9 23       	and	r30, r25
 474:	02 c0       	rjmp	.+4      	; 0x47a <digitalWrite+0x54>
	} else {
		*out |= bit;
 476:	ec 91       	ld	r30, X
 478:	ed 2b       	or	r30, r29
 47a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 47c:	8f bf       	out	0x3f, r24	; 63
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	08 95       	ret

00000486 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
